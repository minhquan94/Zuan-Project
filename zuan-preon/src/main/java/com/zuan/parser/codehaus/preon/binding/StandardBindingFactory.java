/*
 * Copyright (c) 2018 Zuan_Wiko
 */
package com.zuan.parser.codehaus.preon.binding;

import java.io.IOException;
import java.lang.reflect.AnnotatedElement;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.List;

import com.zuan.parser.codehaus.preon.Builder;
import com.zuan.parser.codehaus.preon.Codec;
import com.zuan.parser.codehaus.preon.CodecDescriptor;
import com.zuan.parser.codehaus.preon.DecodingException;
import com.zuan.parser.codehaus.preon.Resolver;
import com.zuan.parser.codehaus.preon.ResolverContext;
import com.zuan.parser.codehaus.preon.buffer.BitBuffer;
import com.zuan.parser.codehaus.preon.buffer.BitBufferException;
import com.zuan.parser.codehaus.preon.channel.BitChannel;
import com.zuan.parser.codehaus.preon.el.Expression;
import com.zuan.parser.codehaus.preon.reflect.ReflectionUtils;
import com.zuan.parser.codehaus.preon.rendering.CamelCaseRewriter;
import com.zuan.parser.codehaus.preon.rendering.IdentifierRewriter;

import nl.flotsam.pecia.Documenter;
import nl.flotsam.pecia.ParaContents;
import nl.flotsam.pecia.SimpleContents;

/**
 * The {@link BindingFactory} that will simply create a simple {@link Binding}
 * that unconditionally sets and takes the values from the field from which it
 * is constructed.
 */
@SuppressWarnings({"rawtypes", "unchecked" })
public class StandardBindingFactory implements BindingFactory {

  /** A unique id for bindings generated by this class. */
  private static int id;

  /** The rewriter. */
  private IdentifierRewriter rewriter = new CamelCaseRewriter();

  /*
   * (non-Javadoc)
   * @see com.zuan.parser.codehaus.preon.binding.BindingFactory#create(java.
   * lang.reflect.AnnotatedElement, java.lang.reflect.Field,
   * com.zuan.parser.codehaus.preon.Codec,
   * com.zuan.parser.codehaus.preon.ResolverContext,
   * nl.flotsam.pecia.Documenter)
   */
  @Override
  public Binding create(AnnotatedElement metadata, Field field, Codec< ? > codec,
      ResolverContext context, Documenter<ParaContents< ? >> containerReference) {
    return new FieldBinding(field, codec, rewriter, containerReference);
  }

  /**
   * The Class FieldBinding.
   */
  private static class FieldBinding implements Binding {

    /** The id. */
    private String id = "binding" + StandardBindingFactory.id++;

    /** The field. */
    private Field field;

    /** The codec. */
    private Codec codec;

    /** The rewriter. */
    private IdentifierRewriter rewriter;

    /** The builder decorator. */
    private Decorator<Builder> builderDecorator;

    /** The container reference. */
    private Documenter<ParaContents< ? >> containerReference;

    /**
     * Instantiates a new field binding.
     *
     * @param field
     *          the field
     * @param codec
     *          the codec
     * @param rewriter
     *          the rewriter
     * @param containerReference
     *          the container reference
     */
    public FieldBinding(Field field, Codec< ? > codec, IdentifierRewriter rewriter,
        Documenter<ParaContents< ? >> containerReference) {
      this.field = field;
      this.codec = codec;
      this.rewriter = rewriter;
      this.containerReference = containerReference;
      field.setAccessible(true);
      Class< ? > declaring = field.getDeclaringClass();
      builderDecorator = new ContextualBuilderDecorator(declaring);
    }

    /*
     * (non-Javadoc)
     * @see
     * com.zuan.parser.codehaus.preon.binding.Binding#load(java.lang.Object,
     * com.zuan.parser.codehaus.preon.buffer.BitBuffer,
     * com.zuan.parser.codehaus.preon.Resolver,
     * com.zuan.parser.codehaus.preon.Builder)
     */
    @Override
    public void load(Object object, BitBuffer buffer, Resolver resolver, Builder builder)
        throws DecodingException {
      try {
        ReflectionUtils.makeAssessible(field);
        Object value =
            codec.decode(buffer, resolver, builderDecorator.decorate(builder, object));
        field.set(object, value);
      } catch (IllegalAccessException iae) {
        throw new DecodingException(iae);
      } catch (DecodingException de) {
        throw de;
      } catch (BitBufferException bbe) {
        throw bbe;
      }
    }

    /*
     * (non-Javadoc)
     * @see com.zuan.parser.codehaus.preon.binding.Binding#describe(nl.flotsam.
     * pecia.SimpleContents)
     */
    @Override
    public <V extends SimpleContents< ? >> V describe(V contents) {
      CodecDescriptor codecDescriptor = codec.getCodecDescriptor();
      contents.para().document(codecDescriptor.summary()).end();
      contents.document(codecDescriptor.details("buffer"));
      return contents;
    }

    /*
     * (non-Javadoc)
     * @see com.zuan.parser.codehaus.preon.binding.Binding#getTypes()
     */
    @Override
    public Class< ? >[] getTypes() {
      return codec.getTypes();
    }

    /*
     * (non-Javadoc)
     * @see com.zuan.parser.codehaus.preon.binding.Binding#get(java.lang.Object)
     */
    @Override
    public Object get(Object context) throws IllegalArgumentException, IllegalAccessException {
      return field.get(context);
    }

    /*
     * (non-Javadoc)
     * @see com.zuan.parser.codehaus.preon.binding.Binding#getName()
     */
    @Override
    public String getName() {
      return field.getName();
    }

    /*
     * (non-Javadoc)
     * @see com.zuan.parser.codehaus.preon.binding.Binding#writeReference(nl.
     * flotsam.pecia.ParaContents)
     */
    @Override
    public <T, V extends ParaContents<T>> V writeReference(V contents) {
      contents.link(getId(), rewriter.rewrite(getName())).text(" of ")
          .document(containerReference);
      return contents;
    }

    /*
     * (non-Javadoc)
     * @see com.zuan.parser.codehaus.preon.binding.Binding#getSize()
     */
    @Override
    public Expression<Integer, Resolver> getSize() {
      return codec.getSize();
    }

    /*
     * (non-Javadoc)
     * @see com.zuan.parser.codehaus.preon.binding.Binding#getId()
     */
    @Override
    public String getId() {
      return id;
    }

    /*
     * (non-Javadoc)
     * @see com.zuan.parser.codehaus.preon.binding.Binding#getType()
     */
    @Override
    public Class< ? > getType() {
      return codec.getType();
    }

    /*
     * (non-Javadoc)
     * @see
     * com.zuan.parser.codehaus.preon.binding.Binding#save(java.lang.Object,
     * com.zuan.parser.codehaus.preon.channel.BitChannel,
     * com.zuan.parser.codehaus.preon.Resolver)
     */
    @Override
    public void save(Object value, BitChannel channel, Resolver resolver) throws IOException {
      try {
        ReflectionUtils.makeAssessible(field);
        codec.encode(field.get(value), channel, resolver);
      } catch (IllegalAccessException e) {
        // TODO: Need a better way to handle this properly
        throw new IllegalStateException(e);
      }
    }

  }

  /**
   * The Interface Decorator.
   *
   * @param <T>
   *          the generic type
   */
  @FunctionalInterface
  private interface Decorator<T> {

    /**
     * Decorate.
     *
     * @param object
     *          the object
     * @param context
     *          the context
     * @return the t
     */
    T decorate(T object, Object context);

  }

  /**
   * The Class ContextualBuilderDecorator.
   */
  private static class ContextualBuilderDecorator implements Decorator<Builder> {

    /** The enclosing. */
    private Class enclosing;

    /** The members. */
    private List<Class> members;

    /**
     * Instantiates a new contextual builder decorator.
     *
     * @param enclosing
     *          the enclosing
     */
    public ContextualBuilderDecorator(Class enclosing) {
      this.enclosing = enclosing;
      this.members = new ArrayList<>();
      for (Class member : enclosing.getDeclaredClasses()) {
        if (!Modifier.isStatic(member.getModifiers())) {
          members.add(member);
        }
      }
    }

    /*
     * (non-Javadoc)
     * @see com.zuan.parser.codehaus.preon.binding.StandardBindingFactory.
     * Decorator#decorate(java.lang.Object, java.lang.Object)
     */
    @Override
    public Builder decorate(Builder builder, Object context) {
      return new ContextualBuilder(enclosing, members, builder, context);
    }

    /**
     * The Class ContextualBuilder.
     */
    private static class ContextualBuilder implements Builder {

      /** The enclosing. */
      private Class enclosing;

      /** The members. */
      private List<Class> members;

      /** The delegate. */
      private Builder delegate;

      /** The context. */
      private Object context;

      /**
       * Instantiates a new contextual builder.
       *
       * @param enclosing
       *          the enclosing
       * @param members
       *          the members
       * @param delegate
       *          the delegate
       * @param context
       *          the context
       */
      public ContextualBuilder(Class enclosing, List<Class> members, Builder delegate,
          Object context) {
        this.enclosing = enclosing;
        this.members = members;
        this.delegate = delegate;
        this.context = context;
      }

      /**
       * Creates the.
       *
       * @param <T>
       *          the generic type
       * @param type
       *          the type
       * @return the t
       * @throws InstantiationException
       *           the instantiation exception
       * @throws IllegalAccessException
       *           the illegal access exception
       */
      @Override
      public <T> T create(Class<T> type)
          throws InstantiationException, IllegalAccessException {
        if (members.contains(type)) {
          try {
            Constructor<T> constructor = type.getDeclaredConstructor(enclosing);
            constructor.setAccessible(true);
            return constructor.newInstance(context);
          } catch (NoSuchMethodException nsme) {
            throw new InstantiationException("Missing valid default constructor.");
          } catch (IllegalArgumentException e) {
            throw new InstantiationException("Enclosing instance not accepted as argument.");
          } catch (InvocationTargetException e) {
            throw new InstantiationException("Failed to call constructor.");
          }
        } else {
          return delegate.create(type);
        }
      }

    }

  }

}
